<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.app.shopping.domain.mapper.PaymentMapper">
    <insert id="save" parameterType="map">
        INSERT INTO payment (buyer_addr,
                             buyer_email,
                             buyer_name,
                             buyer_postcode,
                             buyer_tel,
                             card_name,
                             imp_uid,
                             merchant_uid,
                             name,
                             paid_amount,
                             paid_at,
                             pg_type,
                             pay_method,
                             status,
                             regDate,
                             userid,
                             Oid,
                             delivery_status,
                             refund_request_status,
                             delivery_message)
        VALUES (#{paymentDto.buyer_addr},
                #{paymentDto.buyer_email},
                #{paymentDto.buyer_name},
                #{paymentDto.buyer_postcode},
                #{paymentDto.buyer_tel},
                #{paymentDto.card_name},
                #{paymentDto.imp_uid},
                #{paymentDto.merchant_uid},
                #{paymentDto.name},
                #{paymentDto.paid_amount},
                #{paymentDto.paid_at},
                #{paymentDto.pg_type},
                #{paymentDto.pay_method},
                #{paymentDto.status},
                NOW(),
                #{userid},
                #{Oid},
                "배송준비",
                "N",
                #{paymentDto.custom_data})
    </insert>
    <select id="searchPayment" resultType="com.example.app.shopping.domain.dto.PaymentDto" parameterType="com.example.app.shopping.domain.dto.PaymentDto">
        SELECT id,
               buyer_addr,
               buyer_email,
               buyer_name,
               buyer_postcode,
               buyer_tel,
               card_name,
               imp_uid,
               merchant_uid,
               name,
               paid_amount,
               paid_at,
               pg_type,
               pay_method,
               status,
               regDate,
               updateDate
        FROM payment
        WHERE userid = #{id}
    </select>

    <!-- 마이 페이지 Payments Counting -->
    <select id="selectAllCountByUid" resultType="Integer" parameterType="String">
        SELECT
        COUNT(*)
        FROM
        payment p
        INNER JOIN
        `order` o ON p.Oid = o.id
        WHERE
        o.Uid = #{uId}
    </select>

    <!-- 마이 페이지 Payment 리스트 조회 -->
    <select id="selectAllByUid" resultType="map" parameterType="map">
        SELECT
        p.*
        FROM
        payment p
        INNER JOIN
        `order` o ON p.Oid = o.id
        WHERE
        o.Uid = #{uId}
        ORDER BY
        p.regDate DESC, p.id DESC
        LIMIT #{offset}, #{criteria.amount}
    </select>

    <!-- id 를 사용한 payment 조회 -->
    <select id="selectPaymentById" resultType="map">
        SELECT
        p.*
        FROM
        payment p
        INNER JOIN
        `order` o ON p.Oid = o.id
        WHERE
        p.id = #{id}
    </select>

    <!-- 환불 상태에 대한 update -->
    <update id="updateRefundStatus">
        UPDATE payment
        <set>
            <if test="status != null">
                refund_request_status = #{status},
            </if>
            updateDate = DATE(NOW())
        </set>
        WHERE id = #{id}
    </update>

    <!-- oId 를 사용한 payment 조회 -->
    <select id="selectPaymentByoId" resultType="map">
        SELECT
        p.*
        FROM Payment p
        WHERE
        p.Oid = #{oId}
    </select>

    <!-- delivery_status 에 대한 리스트의 count 반환 -->
    <select id="selectPaymentsCountByDeliveryStatus" resultType="int">
        SELECT
        count(*)
        FROM
        payment p
        <where>
            <if test="criteria.commentChk != null and criteria.commentChk != ''">
                AND delivery_status = "배송중"
            </if>
            <if test="criteria.commentChk == null or criteria.commentChk == ''">
                AND delivery_status in ("배송준비", "배송중")
            </if>
        </where>
    </select>

    <!-- delivery_status 에 대한 리스트 반환 -->
    <select id="selectPaymentsByDeliveryStatus" resultType="map" parameterType="map">
        SELECT
        p.*
        FROM Payment p
        <where>
            <if test="criteria.commentChk != null and criteria.commentChk != ''">
                AND delivery_status = "배송중"
            </if>
            <if test="criteria.commentChk == null or criteria.commentChk == ''">
                AND delivery_status in ("배송준비", "배송중")
            </if>
        </where>
        ORDER BY
        p.regDate DESC, p.id DESC
        LIMIT #{offset}, #{criteria.amount}
    </select>

    <!-- 배송 상태에 대한 update -->
    <update id="updateDeliveryStatus">
        UPDATE payment
        <set>
            <if test="status != null">
                delivery_status = #{status},
            </if>
            updateDate = DATE(NOW())
        </set>
        WHERE id = #{id}
    </update>

    <!-- refund_request_status 에 대한 리스트의 count 반환 -->
    <select id="selectPaymentsCountByRefundStatus" resultType="int">
        SELECT
        count(*)
        FROM
        payment p
        WHERE refund_request_status = "R"
    </select>

    <!-- refund_request_status 에 대한 리스트 반환 -->
    <select id="selectPaymentsByRefundStatus" resultType="map" parameterType="map">
        SELECT
        p.*
        FROM Payment p
        WHERE refund_request_status = "R"
        ORDER BY
        p.regDate DESC, p.id DESC
        LIMIT #{offset}, #{criteria.amount}
    </select>
</mapper>